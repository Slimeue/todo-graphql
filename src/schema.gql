# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Meta {
  page: Float!
  limit: Float!
}

type User {
  id: ID!
  email: String!
  password: String!
  salt: String!
  displayName: String
  roles: [Role!]!
  getUserById(
    """User id"""
    id: ID!
    username: String!
  ): User
  getAllUsers: [User!]

  """owned workspaces"""
  ownedWorkSpaces: [WorkSpace!]

  """workspaces that user is a member/admin but not owner"""
  workSpaces: [WorkSpace!]
}

enum Role {
  ADMIN
  MEMBER
  USER
  OWNER
}

type WorkSpace {
  id: ID!
  name: String!
  ownerId: String!
  description: String
  members(id: String!): [WorkSpaceMember!]
  workspaceRooms(input: WorkspaceRoomPaginationInput!): WorkSpaceRoomSearch
}

input WorkspaceRoomPaginationInput {
  page: Float = 1
  limit: Float = 10
  search: String
  orderBy: String
  accountId: String
  workspaceId: ID
}

type WorkSpaceMember {
  id: ID!
  workSpaceId: ID!
  memberId: ID!
  email: String!
  roles: [Role!]!
}

type Todo {
  id: ID!
  userId: ID!
  title: String!
  description: String
  status: String!
  priority: String!
  categoryId: ID
  category: String
  workspaceId: ID!
  workspaceRoomId: ID!
  getTodo(id: String!): Todo
}

type TodoCategory {
  id: ID!
  userId: ID!
  name: String!
  description: String
  getTodoCategories(input: TodoCategoryPaginationInput!): TodoCategorySearch
  getTodoCategory(id: String!): TodoCategory
}

input TodoCategoryPaginationInput {
  page: Float = 1
  limit: Float = 10
  search: String
  orderBy: String
  accountId: String
  userId: String
}

type TodoSearch {
  items: [Todo!]
  meta: Meta!
}

type TodoCategorySearch {
  items: [TodoCategory!]
  meta: Meta!
}

type WorkSpaceRoom {
  id: ID!
  name: String!
  description: String!
  workspaceId: String!
  spaceRoomTodos(input: TodoPaginationInput!): TodoSearch
}

input TodoPaginationInput {
  page: Float = 1
  limit: Float = 10
  search: String
  orderBy: String
  accountId: String
  userId: ID
  workspaceId: ID
  workspaceRoomId: ID
}

type WorkSpaceRoomSearch {
  items: [WorkSpaceRoom!]!
  meta: Meta!
}

type InvitationToken {
  id: ID!
  token: String!
  userId: String!
  email: String!
  workspaceId: String!
}

type Query {
  todoQuery: Todo
  userQuery: User!
  todoCategoryQuery: TodoCategory
  workSpaceQuery: WorkSpace
  workSpaceRoomQuery: WorkSpaceRoom
}

type Mutation {
  createTodo(input: todoCreateInput!): Todo!
  updateTodo(input: todoUpdateInput!): Todo!
  deleteTodo(id: String!): Todo!
  createUser(createUserData: createUserInput!): User!
  createTodoCategory(input: TodoCategoryCreateInput!): TodoCategory!
  updateTodoCategory(input: TodoCategoryUpdateInput!): TodoCategory!
  createWorkSpace(input: WorkSpaceCreateInput!): WorkSpace!
  updateWorkSpace(input: WorkSpaceUpdateInput!): WorkSpace!
  acceptInvitation(token: String!): WorkSpaceMember!
  createInvitationToken(input: InvitationTokenCreateInput!): InvitationToken!
  createWorkSpaceRoom(input: WorkSpaceRoomCreateInput!): WorkSpaceRoom!
}

input todoCreateInput {
  title: String!
  description: String
  status: String!
  priority: String!
  categoryId: ID
  workspaceId: ID!
  workspaceRoomId: ID!
}

input todoUpdateInput {
  id: ID!
  title: String
  description: String
  status: String
  priority: String
  categoryId: ID
}

input createUserInput {
  email: String!
  password: String!
}

input TodoCategoryCreateInput {
  name: String!
  description: String
}

input TodoCategoryUpdateInput {
  id: ID!
  name: String
  description: String
}

input WorkSpaceCreateInput {
  name: String!
  description: String
}

input WorkSpaceUpdateInput {
  id: ID!
  name: String!
  description: String
}

input InvitationTokenCreateInput {
  workspaceId: String!
}

input WorkSpaceRoomCreateInput {
  name: String!
  description: String!
  workspaceId: String!
}